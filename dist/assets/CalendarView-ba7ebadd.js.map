{"version":3,"file":"CalendarView-ba7ebadd.js","sources":["../../src/views/CalendarView.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-view\">\n    <div class=\"calendar-header\">\n      <h1>Calendar</h1>\n      <div class=\"calendar-actions\">\n        <Button \n          icon=\"pi pi-plus\" \n          label=\"New Task\" \n          @click=\"showNewTaskDialog = true\"\n        />\n        <div class=\"view-toggles\">\n          <SelectButton v-model=\"viewType\" :options=\"viewOptions\" />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"calendar-container\">\n      <FullCalendar \n        ref=\"calendarRef\"\n        :options=\"calendarOptions\"\n      />\n    </div>\n\n    <!-- Task Dialog -->\n    <Dialog \n      v-model:visible=\"showTaskDialog\"\n      :header=\"dialogMode === 'new' ? 'Create Task' : 'Edit Task'\"\n      :modal=\"true\"\n      class=\"task-dialog\"\n    >\n      <div class=\"p-fluid\">\n        <div class=\"field\">\n          <label for=\"taskType\">Type</label>\n          <Dropdown\n            id=\"taskType\"\n            v-model=\"newTask.type\"\n            :options=\"taskTypes\"\n            optionLabel=\"label\"\n            optionValue=\"value\"\n            placeholder=\"Select Type\"\n          />\n        </div>\n\n        <div class=\"field\">\n          <label for=\"taskTitle\">Title</label>\n          <InputText\n            id=\"taskTitle\"\n            v-model=\"newTask.title\"\n            required\n            autofocus\n          />\n        </div>\n\n        <div class=\"field\">\n          <label for=\"taskDescription\">Description</label>\n          <Textarea\n            id=\"taskDescription\"\n            v-model=\"newTask.description\"\n            rows=\"3\"\n          />\n        </div>\n\n        <div class=\"field\">\n          <label for=\"taskStart\">Start</label>\n          <Calendar\n            id=\"taskStart\"\n            v-model=\"newTask.startDate\"\n            showTime\n            required\n          />\n        </div>\n\n        <div class=\"field\">\n          <label for=\"taskEnd\">End</label>\n          <Calendar\n            id=\"taskEnd\"\n            v-model=\"newTask.endDate\"\n            showTime\n          />\n        </div>\n\n        <div class=\"field\" v-if=\"dialogMode === 'new'\">\n          <label for=\"taskLead\">Lead</label>\n          <Dropdown\n            id=\"taskLead\"\n            v-model=\"selectedLead\"\n            :options=\"store.leads.value\"\n            optionLabel=\"name\"\n            placeholder=\"Select Lead\"\n          />\n        </div>\n      </div>\n\n      <template #footer>\n        <Button\n          label=\"Cancel\"\n          icon=\"pi pi-times\"\n          @click=\"closeDialog\"\n          class=\"p-button-text\"\n        />\n        <Button\n          :label=\"dialogMode === 'new' ? 'Create' : 'Update'\"\n          icon=\"pi pi-check\"\n          @click=\"dialogMode === 'new' ? createTask() : updateTask()\"\n          :disabled=\"!newTask.title || !newTask.type || !newTask.startDate || (dialogMode === 'new' && !selectedLead)\"\n        />\n      </template>\n    </Dialog>\n\n    <!-- Task Details Dialog -->\n    <Dialog \n      v-model:visible=\"showTaskDetails\" \n      :modal=\"true\"\n      header=\"Task Details\"\n      :style=\"{ width: '400px' }\"\n    >\n      <div class=\"task-details\" v-if=\"selectedTask\">\n        <div class=\"detail-item\">\n          <label>Lead:</label>\n          <span>{{ getLead(selectedTask.leadId)?.name }}</span>\n        </div>\n        <div class=\"detail-item\">\n          <label>Type:</label>\n          <Tag :value=\"selectedTask.type\" />\n        </div>\n        <div class=\"detail-item\">\n          <label>Title:</label>\n          <span>{{ selectedTask.title }}</span>\n        </div>\n        <div class=\"detail-item\">\n          <label>Date:</label>\n          <span>{{ formatDateTime(selectedTask.scheduledDate) }}</span>\n        </div>\n        <div class=\"detail-item\" v-if=\"selectedTask.description\">\n          <label>Description:</label>\n          <p>{{ selectedTask.description }}</p>\n        </div>\n        <div class=\"detail-item\">\n          <label>Status:</label>\n          <Tag :value=\"selectedTask.completed ? 'Completed' : 'Pending'\" \n               :severity=\"selectedTask.completed ? 'success' : 'warning'\" />\n        </div>\n      </div>\n\n      <template #footer>\n        <Button \n          label=\"Edit\" \n          icon=\"pi pi-pencil\" \n          @click=\"editTask\"\n        />\n      </template>\n    </Dialog>\n\n    <!-- Delete Confirmation -->\n    <ConfirmDialog></ConfirmDialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { useLeadStore } from '@/stores/leadStore'\nimport type { Lead, Task, TaskType } from '@/types/lead'\nimport FullCalendar from '@fullcalendar/vue3'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport type { CalendarOptions, EventInput } from '@fullcalendar/core'\nimport Button from 'primevue/button'\nimport Dialog from 'primevue/dialog'\nimport InputText from 'primevue/inputtext'\nimport Dropdown from 'primevue/dropdown'\nimport Calendar from 'primevue/calendar'\nimport Textarea from 'primevue/textarea'\nimport Tag from 'primevue/tag'\nimport ConfirmDialog from 'primevue/confirmdialog'\n\nconst store = useLeadStore()\n\n// State\nconst viewType = ref('timeGridWeek')\nconst showTaskDialog = ref(false)\nconst dialogMode = ref<'new' | 'edit'>('new')\nconst showTaskDetails = ref(false)\nconst isEditMode = ref(false)\nconst selectedLead = ref<Lead | null>(null)\nconst selectedTask = ref<Task | null>(null)\nconst newTask = ref({\n  type: 'bellen' as TaskType,\n  title: '',\n  description: '',\n  startDate: new Date(),\n  endDate: null as Date | null\n})\nconst taskTypes = [\n  { label: 'Call', value: 'bellen' },\n  { label: 'Meeting', value: 'afspraak' },\n  { label: 'Email', value: 'mailen' },\n  { label: 'Research', value: 'uitzoeken' }\n]\nconst viewOptions = [\n  { label: 'Month', value: 'dayGridMonth' },\n  { label: 'Week', value: 'timeGridWeek' },\n  { label: 'Day', value: 'timeGridDay' }\n]\n\nconst getTaskColor = (type: TaskType): { bg: string; border: string; text: string } => {\n  switch (type) {\n    case 'bellen':\n      return { bg: '#4CAF50', border: '#388E3C', text: '#FFFFFF' }\n    case 'afspraak':\n      return { bg: '#2196F3', border: '#1976D2', text: '#FFFFFF' }\n    case 'mailen':\n      return { bg: '#FF9800', border: '#F57C00', text: '#000000' }\n    case 'uitzoeken':\n      return { bg: '#9C27B0', border: '#7B1FA2', text: '#FFFFFF' }\n    default:\n      return { bg: '#757575', border: '#616161', text: '#FFFFFF' }\n  }\n}\n\nconst calendarEvents = computed<EventInput[]>(() => {\n  return store.tasks.value.map(task => {\n    const colors = getTaskColor(task.type)\n    return {\n      id: task.id,\n      title: task.title,\n      start: task.scheduledDate,\n      end: task.scheduledDate,\n      backgroundColor: colors.bg,\n      borderColor: colors.border,\n      textColor: colors.text,\n      extendedProps: {\n        type: task.type,\n        leadId: task.leadId,\n        completed: task.completed,\n        description: task.description\n      }\n    }\n  })\n})\n\nconst calendarOptions = computed<CalendarOptions>(() => ({\n  plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n  initialView: viewType.value,\n  headerToolbar: {\n    left: 'prev,next today',\n    center: 'title',\n    right: 'dayGridMonth,timeGridWeek,timeGridDay'\n  },\n  editable: true,\n  selectable: true,\n  selectMirror: true,\n  dayMaxEvents: true,\n  weekends: true,\n  events: calendarEvents.value,\n  eventClick: handleEventClick,\n  select: handleDateSelect,\n  eventDrop: handleEventDrop,\n  eventResize: handleEventResize,\n  slotMinTime: '08:00:00',\n  slotMaxTime: '20:00:00',\n  allDaySlot: false,\n  slotDuration: '00:30:00',\n  nowIndicator: true\n}))\n\nconst handleDateSelect = (selectInfo: { start: Date; end: Date }) => {\n  newTask.value.startDate = selectInfo.start\n  newTask.value.endDate = selectInfo.end\n  dialogMode.value = 'new'\n  showTaskDialog.value = true\n}\n\nconst handleEventClick = (clickInfo: { event: { id: string; extendedProps: { leadId: string } } }) => {\n  const task = store.tasks.value.find(t => t.id === clickInfo.event.id)\n  if (task) {\n    selectedTask.value = task\n    selectedLead.value = store.getLeadById(task.leadId)\n    dialogMode.value = 'edit'\n    showTaskDialog.value = true\n  }\n}\n\nconst handleEventDrop = (dropInfo: { event: { id: string; start: Date; end: Date } }) => {\n  store.updateTask(dropInfo.event.id, {\n    scheduledDate: dropInfo.event.start.toISOString()\n  })\n}\n\nconst handleEventResize = (resizeInfo: { event: { id: string; start: Date; end: Date } }) => {\n  store.updateTask(resizeInfo.event.id, {\n    scheduledDate: resizeInfo.event.start.toISOString()\n  })\n}\n\nconst createTask = () => {\n  if (selectedLead.value) {\n    store.addTask({\n      type: newTask.value.type,\n      title: newTask.value.title,\n      description: newTask.value.description,\n      scheduledDate: newTask.value.startDate.toISOString(),\n      completed: false,\n      leadId: selectedLead.value.id\n    })\n    closeDialog()\n  }\n}\n\nconst updateTask = () => {\n  if (selectedTask.value) {\n    store.updateTask(selectedTask.value.id, {\n      type: newTask.value.type,\n      title: newTask.value.title,\n      description: newTask.value.description,\n      scheduledDate: newTask.value.startDate.toISOString()\n    })\n    closeDialog()\n  }\n}\n\nconst closeDialog = () => {\n  showTaskDialog.value = false\n  selectedTask.value = null\n  selectedLead.value = null\n  newTask.value = {\n    type: 'bellen',\n    title: '',\n    description: '',\n    startDate: new Date(),\n    endDate: null\n  }\n}\n\nconst editTask = () => {\n  if (selectedTask.value) {\n    isEditMode.value = true\n    selectedLead.value = store.getLeadById(selectedTask.value.leadId)\n    newTask.value = {\n      type: selectedTask.value.type,\n      title: selectedTask.value.title,\n      description: selectedTask.value.description || '',\n      startDate: new Date(selectedTask.value.scheduledDate),\n      endDate: null\n    }\n    showTaskDetails.value = false\n    showTaskDialog.value = true\n  }\n}\n\nconst getLead = (id: string) => {\n  return store.leads.value.find(lead => lead.id === id)\n}\n\nconst formatDateTime = (date: string) => {\n  return new Date(date).toLocaleString()\n}\n</script>\n\n<style>\n.calendar-view {\n  padding: 1rem;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.calendar-header h1 {\n  font-family: 'BankGothic', 'ITC Avant Garde Gothic', 'Arial Black', sans-serif;\n  margin: 0;\n  color: var(--color-primary);\n}\n\n.calendar-actions {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n}\n\n.calendar-container {\n  background: white;\n  padding: 1rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n/* Calendar Event Styles */\n.calendar-event {\n  padding: 2px 4px;\n  border-radius: 3px;\n}\n\n.calendar-event.completed {\n  opacity: 0.7;\n  text-decoration: line-through;\n}\n\n.event-title {\n  font-weight: 500;\n  margin-bottom: 2px;\n}\n\n.event-type {\n  font-size: 0.8em;\n  opacity: 0.8;\n}\n\n/* Form Styles */\n.task-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.field label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n}\n\n.field-checkbox {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n/* Task Details Styles */\n.task-details {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.detail-item label {\n  font-weight: 500;\n  margin-right: 0.5rem;\n  color: #666;\n}\n\n/* FullCalendar Customizations */\n:deep(.fc) {\n  font-family: 'Century Gothic', Futura, Arial, sans-serif;\n}\n\n:deep(.fc-toolbar-title) {\n  font-family: 'BankGothic', 'ITC Avant Garde Gothic', 'Arial Black', sans-serif;\n}\n\n:deep(.fc-event) {\n  cursor: pointer;\n}\n\n:deep(.fc-day-today) {\n  background-color: #f8f9fa !important;\n}\n\n:deep(.fc-timegrid-now-indicator-line) {\n  border-color: var(--color-primary);\n}\n\n:deep(.fc-timegrid-now-indicator-arrow) {\n  border-color: var(--color-primary);\n}\n</style>\n"],"names":["store","useLeadStore","viewType","ref","showTaskDialog","dialogMode","showTaskDetails","isEditMode","selectedLead","selectedTask","newTask","taskTypes","viewOptions","getTaskColor","type","calendarEvents","computed","task","colors","calendarOptions","dayGridPlugin","timeGridPlugin","interactionPlugin","handleEventClick","handleDateSelect","handleEventDrop","handleEventResize","selectInfo","clickInfo","t","dropInfo","resizeInfo","createTask","closeDialog","updateTask","editTask","getLead","id","lead","formatDateTime","date"],"mappings":"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"}