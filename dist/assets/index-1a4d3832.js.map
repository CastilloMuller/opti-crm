{"version":3,"mappings":"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","names":["menuItems","useLeadStore","defineStore","leads","ref","tasks","communications","notes","loading","error","getLeadById","computed","id","lead","getTasksByLeadId","leadId","task","getCommunicationsByLeadId","comm","getNotesByLeadId","note","getFilteredLeads","filter","tag","leadDate","DateTime","startDate","endDate","searchLower","getSortedLeads","sort","a","b","aValue","bValue","response","newLead","e","updates","updatedLead","index","newTask","updatedTask","WebSocketService","__publicField","wsUrl","event","_a","data","message","websocketService","useWebSocket","route","useRoute","isConnected","showNotifications","notifications","unreadNotifications","pageTitle","routeName","toggleNotifications","formatDate","date","useNotificationStore","preferences","unreadCount","n","groupedNotifications","groups","notification","recentNotifications","newPreferences","updatedPreferences","newNotification","useNotifications","store","notificationStore","unreadCountStore","storeToRefs","initialize","markAsRead","markAllAsRead","deleteNotification","clearAllNotifications","updatePreferences","addNotification","action","messages","severities","leadName","communication","socket","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connect","handleReconnect","handleWebSocketMessage","handleNotification","handleLeadUpdate","handleTaskUpdate","handleCommunicationUpdate","handleSystemMessage","payload","sendMessage","type","disconnect","onMounted","onUnmounted","router","createRouter","createWebHistory","app","createApp","App","pinia","createPinia","PrimeVue"],"sources":["../../src/components/layout/PrimeSidebarCustom.vue","../../src/stores/leadStore.ts","../../src/services/websocket.ts","../../src/components/layout/PrimeTopbar.vue","../../src/stores/notificationStore.ts","../../src/composables/useNotifications.ts","../../src/composables/useWebSocket.ts","../../src/App.vue","../../src/router/index.ts","../../src/main.ts"],"sourcesContent":["<template>\n  <aside class=\"sidebar\">\n    <div class=\"logo-container p-4\">\n      <h2 class=\"text-xl font-bold text-primary\">OptiCRM</h2>\n    </div>\n    <Menu :model=\"menuItems\" class=\"border-none w-full\" />\n  </aside>\n</template>\n\n<script setup lang=\"ts\">\nimport Menu from 'primevue/menu'\n\nconst menuItems = [\n  {\n    label: 'Dashboard',\n    icon: 'pi pi-home',\n    to: '/'\n  },\n  {\n    label: 'Leads',\n    icon: 'pi pi-users',\n    to: '/leads'\n  },\n  {\n    label: 'Tasks',\n    icon: 'pi pi-check-square',\n    to: '/tasks'\n  },\n  {\n    label: 'Calendar',\n    icon: 'pi pi-calendar',\n    to: '/calendar'\n  },\n  {\n    label: 'Analytics',\n    icon: 'pi pi-chart-line',\n    to: '/analytics'\n  }\n]\n</script>\n\n<style scoped>\n.sidebar {\n  width: 250px;\n  background-color: var(--surface-overlay);\n  border-right: 1px solid var(--surface-border);\n  display: flex;\n  flex-direction: column;\n}\n\n.logo-container {\n  border-bottom: 1px solid var(--surface-border);\n}\n\n:deep(.p-menu) {\n  background: transparent;\n  border: none;\n  padding: 0.5rem;\n  width: 100%;\n}\n\n:deep(.p-menu-list) {\n  outline: none;\n}\n\n:deep(.p-menuitem) {\n  margin: 0.25rem 0;\n}\n\n:deep(.p-menuitem-link) {\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  transition: all 0.2s;\n}\n\n:deep(.p-menuitem-link:hover) {\n  background-color: var(--surface-hover);\n}\n\n:deep(.p-menuitem-link.router-link-active) {\n  background-color: var(--primary-color);\n  color: white;\n}\n\n:deep(.p-menuitem-link.router-link-active .p-menuitem-icon),\n:deep(.p-menuitem-link.router-link-active .p-menuitem-text) {\n  color: white;\n}\n</style>\n","import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport type { Lead, Task, Communication, Note, LeadFilter, LeadSort } from '@/types/lead'\nimport { DateTime } from 'luxon'\n\nexport const useLeadStore = defineStore('leads', () => {\n  // State\n  const leads = ref<Lead[]>([])\n  const tasks = ref<Task[]>([])\n  const communications = ref<Communication[]>([])\n  const notes = ref<Note[]>([])\n  const loading = ref(false)\n  const error = ref<string | null>(null)\n\n  // Getters\n  const getLeadById = computed(() => (id: string) => {\n    return leads.value.find(lead => lead.id === id)\n  })\n\n  const getTasksByLeadId = computed(() => (leadId: string) => {\n    return tasks.value.filter(task => task.leadId === leadId)\n  })\n\n  const getCommunicationsByLeadId = computed(() => (leadId: string) => {\n    return communications.value.filter(comm => comm.leadId === leadId)\n  })\n\n  const getNotesByLeadId = computed(() => (leadId: string) => {\n    return notes.value.filter(note => note.leadId === leadId)\n  })\n\n  const getFilteredLeads = computed(() => (filter: LeadFilter) => {\n    return leads.value.filter(lead => {\n      if (filter.status && filter.status.length > 0) {\n        if (!filter.status.includes(lead.status)) return false\n      }\n      \n      if (filter.priority && filter.priority.length > 0) {\n        if (!filter.priority.includes(lead.priority)) return false\n      }\n\n      if (filter.source && filter.source.length > 0) {\n        if (!filter.source.includes(lead.source)) return false\n      }\n\n      if (filter.assignedTo && filter.assignedTo.length > 0) {\n        if (!filter.assignedTo.includes(lead.assignedTo)) return false\n      }\n\n      if (filter.tags && filter.tags.length > 0) {\n        if (!filter.tags.some(tag => lead.tags.includes(tag))) return false\n      }\n\n      if (filter.dateRange) {\n        const leadDate = DateTime.fromISO(lead.createdAt)\n        const startDate = DateTime.fromISO(filter.dateRange.start)\n        const endDate = DateTime.fromISO(filter.dateRange.end)\n        if (leadDate < startDate || leadDate > endDate) return false\n      }\n\n      if (filter.search) {\n        const searchLower = filter.search.toLowerCase()\n        return (\n          lead.name.toLowerCase().includes(searchLower) ||\n          lead.company.toLowerCase().includes(searchLower) ||\n          lead.email.toLowerCase().includes(searchLower)\n        )\n      }\n\n      return true\n    })\n  })\n\n  const getSortedLeads = computed(() => (leads: Lead[], sort: LeadSort) => {\n    return [...leads].sort((a, b) => {\n      const aValue = a[sort.field]\n      const bValue = b[sort.field]\n\n      if (sort.direction === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0\n      } else {\n        return bValue < aValue ? -1 : bValue > aValue ? 1 : 0\n      }\n    })\n  })\n\n  // Actions\n  const fetchLeads = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/leads')\n      leads.value = await response.json()\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to fetch leads'\n      console.error('Error fetching leads:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const fetchTasks = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/tasks')\n      tasks.value = await response.json()\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to fetch tasks'\n      console.error('Error fetching tasks:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const fetchCommunications = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/communications')\n      communications.value = await response.json()\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to fetch communications'\n      console.error('Error fetching communications:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const fetchNotes = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/notes')\n      notes.value = await response.json()\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to fetch notes'\n      console.error('Error fetching notes:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const addLead = async (lead: Omit<Lead, 'id' | 'createdAt' | 'updatedAt'>) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/leads', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(lead)\n      })\n      const newLead = await response.json()\n      leads.value.push(newLead)\n      return newLead\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to add lead'\n      console.error('Error adding lead:', e)\n      throw e\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const updateLead = async (id: string, updates: Partial<Lead>) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch(`/api/leads/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      })\n      const updatedLead = await response.json()\n      const index = leads.value.findIndex(lead => lead.id === id)\n      if (index !== -1) {\n        leads.value[index] = updatedLead\n      }\n      return updatedLead\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to update lead'\n      console.error('Error updating lead:', e)\n      throw e\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const deleteLead = async (id: string) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      await fetch(`/api/leads/${id}`, {\n        method: 'DELETE'\n      })\n      leads.value = leads.value.filter(lead => lead.id !== id)\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to delete lead'\n      console.error('Error deleting lead:', e)\n      throw e\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const addTask = async (task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      })\n      const newTask = await response.json()\n      tasks.value.push(newTask)\n      return newTask\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to add task'\n      console.error('Error adding task:', e)\n      throw e\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const updateTask = async (id: string, updates: Partial<Task>) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch(`/api/tasks/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      })\n      const updatedTask = await response.json()\n      const index = tasks.value.findIndex(task => task.id === id)\n      if (index !== -1) {\n        tasks.value[index] = updatedTask\n      }\n      return updatedTask\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to update task'\n      console.error('Error updating task:', e)\n      throw e\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const deleteTask = async (id: string) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      await fetch(`/api/tasks/${id}`, {\n        method: 'DELETE'\n      })\n      tasks.value = tasks.value.filter(task => task.id !== id)\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to delete task'\n      console.error('Error deleting task:', e)\n      throw e\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    // State\n    leads,\n    tasks,\n    communications,\n    notes,\n    loading,\n    error,\n\n    // Getters\n    getLeadById,\n    getTasksByLeadId,\n    getCommunicationsByLeadId,\n    getNotesByLeadId,\n    getFilteredLeads,\n    getSortedLeads,\n\n    // Actions\n    fetchLeads,\n    fetchTasks,\n    fetchCommunications,\n    fetchNotes,\n    addLead,\n    updateLead,\n    deleteLead,\n    addTask,\n    updateTask,\n    deleteTask\n  }\n})\n","import { ref } from 'vue'\nimport { useLeadStore } from '@/stores/leadStore'\nimport type { Lead, Task, Communication, Note } from '@/types/lead'\n\nclass WebSocketService {\n  private socket: WebSocket | null = null\n  private store = useLeadStore()\n  private reconnectAttempts = 0\n  private maxReconnectAttempts = 5\n  private reconnectDelay = 1000\n  private heartbeatInterval: number | null = null\n  \n  public isConnected = ref(false)\n  public lastMessage = ref<Date | null>(null)\n\n  constructor() {\n    this.initializeWebSocket()\n  }\n\n  private initializeWebSocket() {\n    try {\n      const wsUrl = import.meta.env.VITE_WS_URL || \n        (window.location.protocol === 'https:' ? \n          'wss://localhost:3000/ws' : \n          'ws://localhost:3000/ws')\n\n      this.socket = new WebSocket(wsUrl)\n      \n      this.socket.onopen = () => {\n        console.log('WebSocket connected')\n        this.isConnected.value = true\n        this.reconnectAttempts = 0\n        this.reconnectDelay = 1000\n        this.startHeartbeat()\n      }\n\n      this.socket.onclose = () => {\n        console.log('WebSocket disconnected')\n        this.isConnected.value = false\n        this.handleReconnect()\n      }\n\n      this.socket.onerror = (error) => {\n        console.error('WebSocket error:', error)\n        this.isConnected.value = false\n      }\n\n      this.socket.onmessage = (event) => {\n        this.handleMessage(event.data)\n        this.lastMessage.value = new Date()\n      }\n    } catch (error) {\n      console.error('Failed to initialize WebSocket:', error)\n    }\n  }\n\n  private handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++\n      console.log('Attempting to reconnect... (' + this.reconnectAttempts + '/' + this.maxReconnectAttempts + ')')\n      setTimeout(() => {\n        this.initializeWebSocket()\n      }, this.reconnectDelay * this.reconnectAttempts)\n    } else {\n      console.log('Max reconnection attempts reached')\n    }\n  }\n\n  private startHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval)\n    }\n    this.heartbeatInterval = window.setInterval(() => {\n      if (this.socket?.readyState === WebSocket.OPEN) {\n        this.socket.send(JSON.stringify({ type: 'heartbeat' }))\n      }\n    }, 30000)\n  }\n\n  private handleMessage(data: string) {\n    try {\n      const message = JSON.parse(data)\n      switch (message.type) {\n        case 'connection':\n          console.log('Connection status:', message.status)\n          break\n      }\n    } catch (error) {\n      console.error('Error handling message:', error)\n    }\n  }\n\n  public send(data: any) {\n    if (this.socket?.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data))\n    } else {\n      console.error('WebSocket is not connected')\n    }\n  }\n}\n\nconst websocketService = new WebSocketService()\n\nexport function useWebSocket() {\n  return {\n    isConnected: websocketService.isConnected,\n    lastMessage: websocketService.lastMessage,\n    send: (data: any) => websocketService.send(data)\n  }\n}\n","<template>\n  <header class=\"topbar\">\n    <div class=\"flex justify-content-between align-items-center\">\n      <div class=\"flex align-items-center gap-3\">\n        <span class=\"text-xl\">{{ pageTitle }}</span>\n      </div>\n      <div class=\"flex align-items-center gap-3\">\n        <Button v-tooltip.bottom=\"isConnected ? 'Connected' : 'Disconnected'\"\n          :icon=\"isConnected ? 'pi pi-wifi' : 'pi pi-wifi-off'\"\n          :severity=\"isConnected ? 'success' : 'danger'\"\n          text rounded />\n        \n        <Button v-badge=\"unreadNotifications\" \n          icon=\"pi pi-bell\" \n          @click=\"toggleNotifications\"\n          text rounded />\n        \n        <Avatar icon=\"pi pi-user\" shape=\"circle\" />\n      </div>\n    </div>\n    \n    <Dialog v-model:visible=\"showNotifications\" \n      header=\"Notifications\" \n      :modal=\"false\"\n      position=\"right\"\n      :breakpoints=\"{'960px': '75vw', '640px': '100vw'}\" \n      :style=\"{width: '35vw'}\">\n      <div class=\"notifications-container\">\n        <div v-for=\"notification in notifications\" \n          :key=\"notification.id\" \n          class=\"notification-item p-3 border-bottom-1 surface-border\">\n          <div class=\"flex align-items-center gap-2\">\n            <i :class=\"notification.icon\" class=\"text-primary\"></i>\n            <span class=\"font-semibold\">{{ notification.title }}</span>\n          </div>\n          <p class=\"text-sm text-color-secondary mt-2 mb-0\">{{ notification.message }}</p>\n          <small class=\"text-color-secondary\">{{ formatDate(notification.timestamp) }}</small>\n        </div>\n      </div>\n    </Dialog>\n  </header>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { useRoute } from 'vue-router'\nimport Avatar from 'primevue/avatar'\nimport Button from 'primevue/button'\nimport Dialog from 'primevue/dialog'\nimport { useWebSocket } from '@/services/websocket'\n\nconst route = useRoute()\nconst { isConnected } = useWebSocket()\n\nconst showNotifications = ref(false)\nconst notifications = ref([\n  {\n    id: 1,\n    title: 'New Lead',\n    message: 'John Doe has been added as a new lead',\n    icon: 'pi pi-user-plus',\n    timestamp: new Date()\n  },\n  {\n    id: 2,\n    title: 'Task Due',\n    message: 'Follow-up call with Sarah Smith is due in 1 hour',\n    icon: 'pi pi-clock',\n    timestamp: new Date()\n  }\n])\n\nconst unreadNotifications = computed(() => notifications.value.length)\n\nconst pageTitle = computed(() => {\n  const routeName = route.name as string\n  return routeName.charAt(0).toUpperCase() + routeName.slice(1)\n})\n\nconst toggleNotifications = () => {\n  showNotifications.value = !showNotifications.value\n}\n\nconst formatDate = (date: Date) => {\n  return new Intl.DateTimeFormat('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  }).format(date)\n}\n</script>\n\n<style scoped>\n.topbar {\n  background-color: var(--surface-card);\n  border-bottom: 1px solid var(--surface-border);\n  padding: 1rem;\n}\n\n.notifications-container {\n  max-height: 70vh;\n  overflow-y: auto;\n}\n\n.notification-item {\n  transition: background-color 0.2s;\n}\n\n.notification-item:hover {\n  background-color: var(--surface-hover);\n}\n</style>\n","import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport type { Notification, NotificationType, NotificationPreferences } from '@/types/notification'\nimport { DateTime } from 'luxon'\n\nexport const useNotificationStore = defineStore('notifications', () => {\n  // State\n  const notifications = ref<Notification[]>([])\n  const preferences = ref<NotificationPreferences>({\n    userId: '',\n    emailNotifications: true,\n    pushNotifications: true,\n    desktopNotifications: true,\n    notificationTypes: {\n      task_due: {\n        enabled: true,\n        email: true,\n        push: true,\n        desktop: true\n      },\n      task_completed: {\n        enabled: true,\n        email: false,\n        push: true,\n        desktop: true\n      },\n      lead_created: {\n        enabled: true,\n        email: true,\n        push: true,\n        desktop: true\n      },\n      lead_updated: {\n        enabled: true,\n        email: false,\n        push: true,\n        desktop: true\n      },\n      lead_status_changed: {\n        enabled: true,\n        email: true,\n        push: true,\n        desktop: true\n      },\n      communication_received: {\n        enabled: true,\n        email: true,\n        push: true,\n        desktop: true\n      },\n      communication_scheduled: {\n        enabled: true,\n        email: true,\n        push: true,\n        desktop: true\n      },\n      note_added: {\n        enabled: true,\n        email: false,\n        push: true,\n        desktop: true\n      },\n      mention: {\n        enabled: true,\n        email: true,\n        push: true,\n        desktop: true\n      },\n      system: {\n        enabled: true,\n        email: true,\n        push: true,\n        desktop: true\n      }\n    },\n    quietHours: {\n      enabled: false,\n      start: '22:00',\n      end: '07:00',\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    }\n  })\n  const loading = ref(false)\n  const error = ref<string | null>(null)\n\n  // Getters\n  const unreadCount = computed(() => {\n    return notifications.value.filter(n => !n.read).length\n  })\n\n  const groupedNotifications = computed(() => {\n    const groups: { [key: string]: Notification[] } = {}\n    \n    notifications.value.forEach(notification => {\n      const date = DateTime.fromISO(notification.timestamp).toFormat('yyyy-MM-dd')\n      if (!groups[date]) {\n        groups[date] = []\n      }\n      groups[date].push(notification)\n    })\n\n    return Object.entries(groups).map(([date, notifications]) => ({\n      date,\n      notifications: notifications.sort((a, b) => \n        DateTime.fromISO(b.timestamp).toMillis() - DateTime.fromISO(a.timestamp).toMillis()\n      )\n    }))\n  })\n\n  const recentNotifications = computed(() => {\n    return [...notifications.value]\n      .sort((a, b) => DateTime.fromISO(b.timestamp).toMillis() - DateTime.fromISO(a.timestamp).toMillis())\n      .slice(0, 5)\n  })\n\n  // Actions\n  const fetchNotifications = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/notifications')\n      notifications.value = await response.json()\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to fetch notifications'\n      console.error('Error fetching notifications:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const markAsRead = async (id: string) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      await fetch(`/api/notifications/${id}/read`, {\n        method: 'POST'\n      })\n      const index = notifications.value.findIndex(n => n.id === id)\n      if (index !== -1) {\n        notifications.value[index] = {\n          ...notifications.value[index],\n          read: true\n        }\n      }\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to mark notification as read'\n      console.error('Error marking notification as read:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const markAllAsRead = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      await fetch('/api/notifications/read-all', {\n        method: 'POST'\n      })\n      notifications.value = notifications.value.map(n => ({\n        ...n,\n        read: true\n      }))\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to mark all notifications as read'\n      console.error('Error marking all notifications as read:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const deleteNotification = async (id: string) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      await fetch(`/api/notifications/${id}`, {\n        method: 'DELETE'\n      })\n      notifications.value = notifications.value.filter(n => n.id !== id)\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to delete notification'\n      console.error('Error deleting notification:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const clearAllNotifications = async () => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      await fetch('/api/notifications/clear-all', {\n        method: 'POST'\n      })\n      notifications.value = []\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to clear all notifications'\n      console.error('Error clearing all notifications:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const updatePreferences = async (newPreferences: Partial<NotificationPreferences>) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/notification-preferences', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newPreferences)\n      })\n      const updatedPreferences = await response.json()\n      preferences.value = updatedPreferences\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to update notification preferences'\n      console.error('Error updating notification preferences:', e)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const addNotification = async (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {\n    loading.value = true\n    error.value = null\n    try {\n      // Replace with actual API call\n      const response = await fetch('/api/notifications', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(notification)\n      })\n      const newNotification = await response.json()\n      notifications.value.unshift(newNotification)\n      return newNotification\n    } catch (e) {\n      error.value = e instanceof Error ? e.message : 'Failed to add notification'\n      console.error('Error adding notification:', e)\n      throw e\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    // State\n    notifications,\n    preferences,\n    loading,\n    error,\n\n    // Getters\n    unreadCount,\n    groupedNotifications,\n    recentNotifications,\n\n    // Actions\n    fetchNotifications,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    clearAllNotifications,\n    updatePreferences,\n    addNotification\n  }\n})\n","import { ref, computed } from 'vue'\nimport { useLeadStore } from '@/stores/leadStore'\nimport { useToast } from 'primevue/usetoast'\nimport { DateTime } from 'luxon'\nimport type { Lead, Task, Communication, Note } from '@/types/lead'\nimport { useNotificationStore } from '@/stores/notificationStore'\nimport { storeToRefs } from 'pinia'\nimport type { Notification, NotificationPreferences } from '@/types/notification'\n\ninterface Notification {\n  id: string\n  type: 'lead' | 'task' | 'communication' | 'note'\n  action: 'create' | 'update' | 'delete'\n  title: string\n  message: string\n  timestamp: Date\n  read: boolean\n  severity: 'success' | 'info' | 'warn' | 'error'\n  data?: any\n}\n\nconst notifications = ref<Notification[]>([])\nconst unreadCount = computed(() => notifications.value.filter(n => !n.read).length)\n\nexport function useNotifications() {\n  const store = useNotificationStore()\n  const { notifications: notificationStore, preferences, loading, error, unreadCount: unreadCountStore, groupedNotifications, recentNotifications } = storeToRefs(store)\n\n  const initialize = async () => {\n    await store.fetchNotifications()\n  }\n\n  const markAsRead = async (id: string) => {\n    await store.markAsRead(id)\n  }\n\n  const markAllAsRead = async () => {\n    await store.markAllAsRead()\n  }\n\n  const deleteNotification = async (id: string) => {\n    await store.deleteNotification(id)\n  }\n\n  const clearAllNotifications = async () => {\n    await store.clearAllNotifications()\n  }\n\n  const updatePreferences = async (newPreferences: Partial<NotificationPreferences>) => {\n    await store.updatePreferences(newPreferences)\n  }\n\n  const addNotification = async (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {\n    return await store.addNotification(notification)\n  }\n\n  const handleLeadUpdate = (action: 'create' | 'update' | 'delete', lead: Lead) => {\n    const messages = {\n      create: `New lead created: ${lead.name}`,\n      update: `Lead updated: ${lead.name}`,\n      delete: `Lead deleted: ${lead.name}`\n    }\n\n    const severities = {\n      create: 'success' as const,\n      update: 'info' as const,\n      delete: 'warn' as const\n    }\n\n    addNotification({\n      type: 'lead',\n      action,\n      title: 'Lead Update',\n      message: messages[action],\n      severity: severities[action],\n      data: lead\n    })\n  }\n\n  const handleTaskUpdate = (action: 'create' | 'update' | 'delete', task: Task) => {\n    const lead = useLeadStore().getLeadById.value(task.leadId)\n    const leadName = lead ? lead.name : 'Unknown Lead'\n\n    const messages = {\n      create: `New task created for ${leadName}: ${task.title}`,\n      update: `Task updated for ${leadName}: ${task.title}`,\n      delete: `Task deleted for ${leadName}: ${task.title}`\n    }\n\n    const severities = {\n      create: 'success' as const,\n      update: 'info' as const,\n      delete: 'warn' as const\n    }\n\n    addNotification({\n      type: 'task',\n      action,\n      title: 'Task Update',\n      message: messages[action],\n      severity: severities[action],\n      data: task\n    })\n  }\n\n  const handleCommunicationUpdate = (\n    action: 'create' | 'update' | 'delete',\n    communication: Communication\n  ) => {\n    const lead = useLeadStore().getLeadById.value(communication.leadId)\n    const leadName = lead ? lead.name : 'Unknown Lead'\n\n    const messages = {\n      create: `New ${communication.type} communication with ${leadName}`,\n      update: `Communication updated with ${leadName}`,\n      delete: `Communication deleted with ${leadName}`\n    }\n\n    const severities = {\n      create: 'success' as const,\n      update: 'info' as const,\n      delete: 'warn' as const\n    }\n\n    addNotification({\n      type: 'communication',\n      action,\n      title: 'Communication Update',\n      message: messages[action],\n      severity: severities[action],\n      data: communication\n    })\n  }\n\n  const handleNoteUpdate = (action: 'create' | 'update' | 'delete', note: Note) => {\n    const lead = useLeadStore().getLeadById.value(note.leadId)\n    const leadName = lead ? lead.name : 'Unknown Lead'\n\n    const messages = {\n      create: `New note added for ${leadName}`,\n      update: `Note updated for ${leadName}`,\n      delete: `Note deleted for ${leadName}`\n    }\n\n    const severities = {\n      create: 'success' as const,\n      update: 'info' as const,\n      delete: 'warn' as const\n    }\n\n    addNotification({\n      type: 'note',\n      action,\n      title: 'Note Update',\n      message: messages[action],\n      severity: severities[action],\n      data: note\n    })\n  }\n\n  return {\n    // State\n    notifications: notificationStore,\n    preferences,\n    loading,\n    error,\n    unreadCount: unreadCountStore,\n    groupedNotifications,\n    recentNotifications,\n\n    // Methods\n    initialize,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    clearAllNotifications,\n    updatePreferences,\n    addNotification,\n    handleLeadUpdate,\n    handleTaskUpdate,\n    handleCommunicationUpdate,\n    handleNoteUpdate\n  }\n}\n","import { ref, onMounted, onUnmounted } from 'vue'\nimport { useNotifications } from './useNotifications'\nimport type { Notification } from '@/types/notification'\n\nexport function useWebSocket() {\n  const socket = ref<WebSocket | null>(null)\n  const isConnected = ref(false)\n  const reconnectAttempts = ref(0)\n  const maxReconnectAttempts = 5\n  const reconnectDelay = 1000 // 1 second\n  const { addNotification } = useNotifications()\n\n  const connect = () => {\n    try {\n      const wsUrl = import.meta.env.VITE_WS_URL || 'ws://localhost:3000/ws'\n      socket.value = new WebSocket(wsUrl)\n\n      socket.value.onopen = () => {\n        console.log('WebSocket connected')\n        isConnected.value = true\n        reconnectAttempts.value = 0\n      }\n\n      socket.value.onclose = () => {\n        console.log('WebSocket disconnected')\n        isConnected.value = false\n        handleReconnect()\n      }\n\n      socket.value.onerror = (error) => {\n        console.error('WebSocket error:', error)\n        isConnected.value = false\n      }\n\n      socket.value.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data)\n          handleWebSocketMessage(data)\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error)\n        }\n      }\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error)\n      handleReconnect()\n    }\n  }\n\n  const handleReconnect = () => {\n    if (reconnectAttempts.value < maxReconnectAttempts) {\n      reconnectAttempts.value++\n      console.log(`Attempting to reconnect (${reconnectAttempts.value}/${maxReconnectAttempts})...`)\n      setTimeout(connect, reconnectDelay * reconnectAttempts.value)\n    } else {\n      console.error('Max reconnection attempts reached')\n      addNotification({\n        type: 'system',\n        title: 'Connection Error',\n        message: 'Unable to connect to the server. Please refresh the page.',\n        priority: 'high',\n        actionRequired: true\n      })\n    }\n  }\n\n  const handleWebSocketMessage = (data: any) => {\n    switch (data.type) {\n      case 'notification':\n        handleNotification(data.payload)\n        break\n      case 'lead_update':\n        handleLeadUpdate(data.payload)\n        break\n      case 'task_update':\n        handleTaskUpdate(data.payload)\n        break\n      case 'communication_update':\n        handleCommunicationUpdate(data.payload)\n        break\n      case 'system_message':\n        handleSystemMessage(data.payload)\n        break\n      default:\n        console.warn('Unknown WebSocket message type:', data.type)\n    }\n  }\n\n  const handleNotification = (payload: Notification) => {\n    addNotification(payload)\n  }\n\n  const handleLeadUpdate = (payload: any) => {\n    addNotification({\n      type: 'lead_updated',\n      title: 'Lead Updated',\n      message: `Lead \"${payload.name}\" has been updated`,\n      priority: 'medium',\n      actionRequired: false,\n      metadata: {\n        leadId: payload.id\n      }\n    })\n  }\n\n  const handleTaskUpdate = (payload: any) => {\n    addNotification({\n      type: 'task_updated',\n      title: 'Task Updated',\n      message: `Task \"${payload.title}\" has been updated`,\n      priority: 'medium',\n      actionRequired: false,\n      metadata: {\n        taskId: payload.id,\n        leadId: payload.leadId\n      }\n    })\n  }\n\n  const handleCommunicationUpdate = (payload: any) => {\n    addNotification({\n      type: 'communication_received',\n      title: 'New Communication',\n      message: `New ${payload.method} communication for lead \"${payload.leadName}\"`,\n      priority: 'medium',\n      actionRequired: true,\n      metadata: {\n        communicationId: payload.id,\n        leadId: payload.leadId\n      }\n    })\n  }\n\n  const handleSystemMessage = (payload: any) => {\n    addNotification({\n      type: 'system',\n      title: payload.title || 'System Message',\n      message: payload.message,\n      priority: payload.priority || 'medium',\n      actionRequired: payload.actionRequired || false,\n      metadata: payload.metadata\n    })\n  }\n\n  const sendMessage = (type: string, payload: any) => {\n    if (socket.value && isConnected.value) {\n      socket.value.send(JSON.stringify({ type, payload }))\n    } else {\n      console.error('WebSocket is not connected')\n    }\n  }\n\n  const disconnect = () => {\n    if (socket.value) {\n      socket.value.close()\n      socket.value = null\n      isConnected.value = false\n    }\n  }\n\n  onMounted(() => {\n    connect()\n  })\n\n  onUnmounted(() => {\n    disconnect()\n  })\n\n  return {\n    isConnected,\n    sendMessage,\n    connect,\n    disconnect\n  }\n}\n","<template>\n  <div class=\"app-container\">\n    <PrimeSidebarCustom />\n    <div class=\"main-content\">\n      <PrimeTopbar />\n      <div class=\"content-wrapper p-4\">\n        <RouterView />\n      </div>\n    </div>\n    <Toast position=\"bottom-right\" />\n    <ConfirmDialog />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { RouterView } from 'vue-router'\nimport PrimeSidebarCustom from '@/components/layout/PrimeSidebarCustom.vue'\nimport PrimeTopbar from '@/components/layout/PrimeTopbar.vue'\nimport { useNotifications } from '@/composables/useNotifications'\nimport { useWebSocket } from '@/composables/useWebSocket'\nimport Toast from 'primevue/toast'\nimport ConfirmDialog from 'primevue/confirmdialog'\n\nconst { notifications, unreadCount } = useNotifications()\nconst { isConnected } = useWebSocket()\n</script>\n\n<style>\n.app-container {\n  display: flex;\n  min-height: 100vh;\n  background-color: var(--surface-ground);\n}\n\n.main-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n}\n\n.content-wrapper {\n  flex: 1;\n  background-color: var(--surface-section);\n  border-radius: 12px;\n  margin: 1rem;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n}\n\n:root {\n  --primary-color: #2563eb;\n  --primary-dark: #1e40af;\n  --primary-light: #60a5fa;\n}\n</style>\n","import { createRouter, createWebHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'Dashboard',\n      component: () => import('../views/DashboardView.vue')\n    },\n    {\n      path: '/leads',\n      name: 'Leads',\n      component: () => import('../views/LeadsView.vue')\n    },\n    {\n      path: '/leads/:id',\n      name: 'LeadDetail',\n      component: () => import('../views/LeadDetailView.vue')\n    },\n    {\n      path: '/tasks',\n      name: 'Tasks',\n      component: () => import('../views/TasksView.vue')\n    },\n    {\n      path: '/calendar',\n      name: 'Calendar',\n      component: () => import('../views/CalendarView.vue')\n    },\n    {\n      path: '/analytics',\n      name: 'Analytics',\n      component: () => import('../views/AnalyticsView.vue')\n    }\n  ]\n})\n\nexport default router\n","import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport PrimeVue from 'primevue/config'\nimport App from './App.vue'\nimport router from './router'\n\n// PrimeVue styles\nimport 'primevue/resources/themes/lara-light-blue/theme.css'\nimport 'primevue/resources/primevue.min.css'\nimport 'primeicons/primeicons.css'\n\nconst app = createApp(App)\nconst pinia = createPinia()\n\napp.use(pinia)\napp.use(router)\napp.use(PrimeVue, { ripple: true })\n\napp.mount('#app')\n"],"file":"assets/index-1a4d3832.js"}