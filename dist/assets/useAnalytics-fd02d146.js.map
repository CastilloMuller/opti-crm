{"version":3,"file":"useAnalytics-fd02d146.js","sources":["../../src/composables/useAnalytics.ts"],"sourcesContent":["import { ref, computed } from 'vue'\nimport { useLeadStore } from '@/stores/leadStore'\nimport type { Lead, Communication } from '@/types/lead'\nimport { DateTime } from 'luxon'\n\nexport function useAnalytics() {\n  const store = useLeadStore()\n\n  const leadFunnel = computed(() => {\n    const total = store.leads.length\n    const newLeads = store.leads.filter(lead => lead.status === 'new').length\n    const contacted = store.leads.filter(lead => lead.status === 'contacted').length\n    const qualified = store.leads.filter(lead => lead.status === 'qualified').length\n    const negotiating = store.leads.filter(lead => lead.status === 'negotiating').length\n    const closed = store.leads.filter(lead => lead.status === 'closed').length\n    const lost = store.leads.filter(lead => lead.status === 'lost').length\n\n    return {\n      'New Leads': {\n        count: newLeads,\n        percentage: (newLeads / total) * 100\n      },\n      'Contacted': {\n        count: contacted,\n        percentage: (contacted / total) * 100\n      },\n      'Qualified': {\n        count: qualified,\n        percentage: (qualified / total) * 100\n      },\n      'Negotiating': {\n        count: negotiating,\n        percentage: (negotiating / total) * 100\n      },\n      'Closed': {\n        count: closed,\n        percentage: (closed / total) * 100\n      },\n      'Lost': {\n        count: lost,\n        percentage: (lost / total) * 100\n      }\n    }\n  })\n\n  const leadsByStatus = computed(() => {\n    const statusCounts: Record<string, number> = {}\n    store.leads.forEach(lead => {\n      statusCounts[lead.status] = (statusCounts[lead.status] || 0) + 1\n    })\n    return statusCounts\n  })\n\n  const leadsByPriority = computed(() => {\n    const priorityCounts: Record<string, number> = {\n      'High': 0,\n      'Medium': 0,\n      'Low': 0\n    }\n\n    store.leads.forEach(lead => {\n      if (lead.priority && lead.priority >= 8) {\n        priorityCounts['High']++\n      } else if (lead.priority && lead.priority >= 5) {\n        priorityCounts['Medium']++\n      } else {\n        priorityCounts['Low']++\n      }\n    })\n\n    return priorityCounts\n  })\n\n  const taskStats = computed(() => {\n    const now = DateTime.now()\n    const thirtyDaysAgo = now.minus({ days: 30 })\n\n    const recentTasks = store.tasks.filter(task => {\n      const taskDate = DateTime.fromISO(task.scheduledDate)\n      return taskDate >= thirtyDaysAgo && taskDate <= now\n    })\n\n    return {\n      completed: recentTasks.filter(task => task.completed).length,\n      inProgress: recentTasks.filter(task => !task.completed).length,\n      recentTasks\n    }\n  })\n\n  const communicationStats = computed(() => {\n    const now = DateTime.now()\n    const thirtyDaysAgo = now.minus({ days: 30 })\n\n    const recentCommunications = store.communications.filter(comm => {\n      const commDate = DateTime.fromISO(comm.timestamp)\n      return commDate >= thirtyDaysAgo && commDate <= now\n    })\n\n    const byType = {\n      outbound: recentCommunications.filter(comm => comm.type === 'outbound').length,\n      inbound: recentCommunications.filter(comm => comm.type === 'inbound').length\n    }\n\n    const byMethod = recentCommunications.reduce((acc: Record<string, number>, comm) => {\n      acc[comm.method] = (acc[comm.method] || 0) + 1\n      return acc\n    }, {})\n\n    return {\n      byType,\n      byMethod,\n      recentCommunications\n    }\n  })\n\n  const revenueStats = computed(() => {\n    const now = DateTime.now()\n    const sixMonthsAgo = now.minus({ months: 6 })\n    const months: string[] = []\n    const values: number[] = []\n\n    let current = sixMonthsAgo.startOf('month')\n    while (current <= now) {\n      const monthStr = current.toFormat('MMM yyyy')\n      months.push(monthStr)\n\n      const monthRevenue = store.leads\n        .filter(lead => {\n          if (!lead.quotationValue || lead.status !== 'closed') return false\n          const leadDate = DateTime.fromISO(lead.updatedAt)\n          return leadDate.hasSame(current, 'month')\n        })\n        .reduce((sum, lead) => sum + (lead.quotationValue || 0), 0)\n\n      values.push(monthRevenue)\n      current = current.plus({ months: 1 })\n    }\n\n    return { months, values }\n  })\n\n  const refreshAnalytics = () => {\n    // Refresh store data if needed\n    store.fetchLeads()\n    store.fetchTasks()\n    store.fetchCommunications()\n  }\n\n  return {\n    leadFunnel,\n    leadsByStatus,\n    leadsByPriority,\n    taskStats,\n    communicationStats,\n    revenueStats,\n    refreshAnalytics\n  }\n}\n"],"names":["useAnalytics","store","useLeadStore","leadFunnel","computed","total","newLeads","lead","contacted","qualified","negotiating","closed","lost","leadsByStatus","statusCounts","leadsByPriority","priorityCounts","taskStats","now","DateTime","thirtyDaysAgo","recentTasks","task","taskDate","communicationStats","recentCommunications","comm","commDate","byType","byMethod","acc","revenueStats","sixMonthsAgo","months","values","current","monthStr","monthRevenue","sum"],"mappings":"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"}